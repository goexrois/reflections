What happens when you initialize a repository? Why do you need to do it?

Initially the repository is empty because git is considerated enough to let you decide which files 
of your new repository do yo want to include into the versioning system. So you need to add 
files to the repository in order to git start tracking changes on the files you're interested in 
doing so. 

How is the staging area different from the working directory and the repository? What value do you
think it offers?

In the staging area you can add or remove files to the project without repository even notice it, 
its like an area to get things prepared and choose what do you want  to commit the work done to the 
repository, its also different from the working directory in the way that the working directory only
view files as they are and its only a container for them, on the other hand the staging area its a 
way to preprocess the changes made before commiting.

How can you use the staging area to make sure you have one commit per logical change?

You can choose which files to commit, so those who are involved in the same logical change should be
committed together. You can iterate this to all the changes you've done. So you may have achieved 
more than one logical change but you can commit them sequentially so it seems  you worked it that 
way. 

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

Branches seems to be great to working at parallel projects strongly related to the master branch, as
Sarah mentioned, you can branch out in order to start an experimental feature development without 
compromise the working version of the program or branch out to make an italian version of the same
program, either way, both branches are like two different repositories, different to the master, which 
changes will not be reflected on the master branch. 